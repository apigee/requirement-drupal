<?php

/**
 * Copyright 2019 Google LLC
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_requirements().
 */
function requirement_requirements($phase) {
  $requirements = [];

  if ($phase === 'runtime') {
    /** @var \Drupal\requirement\Plugin\RequirementManagerInterface $requirement_manager */
    $requirement_manager = Drupal::service('plugin.manager.requirement');
    $severity = REQUIREMENT_INFO;
    $unmet_requirement = [];
    /** @var \Drupal\requirement\Plugin\RequirementInterface $requirement */
    foreach ($requirement_manager->listRequirement() as $requirement) {
      if (!$requirement->isCompleted()) {
        $unmet_requirement[$requirement->getId()] = $requirement->getLabel();
        $severity = $requirement->getSeverity() === 'error' ? REQUIREMENT_ERROR : $severity;
        $severity = $requirement->getSeverity() === 'warning' && $severity === REQUIREMENT_INFO ? REQUIREMENT_WARNING : $severity;
      }
    }

    if (count($unmet_requirement)) {
      $requirements['requirement'] = [
        'title' => t('Requirements'),
        'value' => Link::createFromRoute(t('Requirements report'), 'requirement.report'),
        'description' => t('The following requirements for have not been met: <strong>@requirement</strong>. <a href=":uri">See the requirements report</a>.', [
          '@requirement' => implode(', ', $unmet_requirement),
          ':uri' => Url::fromRoute('requirement.report')->toString(),
        ]),
        'severity' => $severity,
      ];
    }
  }

  return $requirements;
}
